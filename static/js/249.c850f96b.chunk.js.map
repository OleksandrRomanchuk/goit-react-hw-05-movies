{"version":3,"file":"static/js/249.c850f96b.chunk.js","mappings":"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","sources":["API/API.js","components/CastSection/CastSection.styled.jsx","components/CastSection/CastSection.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass API {\n  constructor() {\n    this.baseUrl = 'https://api.themoviedb.org/3';\n    this.apiKey = 'api_key=9cca312caffd11f4ae9f11244d585025';\n  }\n\n  getTrendingMovies = async period => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/trending/movie/${period}?${this.apiKey}`\n      );\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMoviesByQuery = async query => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/search/movie?${this.apiKey}&query=${query}`\n      );\n\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieById = async movieId => {\n    try {\n      const { data } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}?${this.apiKey}`\n      );\n\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieCredits = async movieId => {\n    try {\n      const { data } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}/credits?${this.apiKey}`\n      );\n\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieReviews = async movieId => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}/reviews?${this.apiKey}`\n      );\n\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}\n\nconst MovieAPI = new API();\n\nexport default MovieAPI;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    width: 768px;\n    padding: 0 20px;\n\n    margin: 0 auto;\n`;\n\nexport const Title = styled.h3`\n    font-size: 20px;\n    text-align: center;\n`;\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n\n    margin-top: 15px;\n`;\n\nexport const Item = styled.li`\n    border: 1px solid black;\n`;\n\nexport const Photo = styled.img`\n    max-width: 175px;\n    min-height: 263px;\n    object-fit: contain;\n`;\n\nexport const Info = styled.div`\n    padding-top: 8px;\n    padding-bottom: 8px;\n    padding-left: 4px;\n`;\n\nexport const Name = styled.p`\n    font-size: 14px;\n    font-weight: 500;\n`;\n\nexport const Character = styled.p`\n    margin-top: 4px;\n\n    font-weight: 500;\n    color: #9e9e9e;\n`;\n\nexport const Devider = styled.span`\n    margin-left: 4px;\n\n    font-weight: 500;\n    color: orangered;\n`;\n\nexport const CharacterSpan = styled.span`\n    margin-left: 4px;\n\n    font-weight: 400;\n    color: rgb(15, 15, 28);\n`;","import MovieAPI from \"API/API\";\n\n//========== hooks ==========\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n//========== components ==========\nimport photoPlaceholder from \"images/photoPlaceholder.jpg\"\n\n//========== styles ==========\nimport { Wrapper, Title, List, Item, Photo, Info, Name, Character, Devider, CharacterSpan } from \"./CastSection.styled\";\n\nconst CastSection = () => {\n    const [castInfo, setCastInfo] = useState(null);\n    const { id } = useParams();\n\n    useEffect(() => {\n        MovieAPI.getMovieCredits(id).then(({ cast }) => {\n            const info = cast.reduce((acc, man) => {\n                const profilePhoto = man.profile_path ? `https://image.tmdb.org/t/p/original/${man.profile_path}` : photoPlaceholder;\n                const actor = {\n                    id: man.id,\n                    name: man.name,\n                    character: man.character,\n                    photo: profilePhoto\n                };\n                return [...acc, actor]\n            }, []);\n\n            setCastInfo(info);\n        });\n    }, [id]);\n\n    if (!castInfo) return;\n\n    return <Wrapper>\n        <Title>Cast</Title>\n        <List>\n            {castInfo.map(({ id, photo, name, character }) => <Item key={id}>\n                <Photo src={photo} alt={name} />\n                <Info>\n                    <Name>{name}</Name>\n                    <Character>Character<Devider>I</Devider><CharacterSpan>{character}</CharacterSpan></Character>\n            \n                </Info>\n            </Item>)}\n        </List>\n    </Wrapper>;\n};\n\nexport default CastSection;"],"names":["API","getTrendingMovies","period","axios","baseUrl","apiKey","results","data","console","log","message","getMoviesByQuery","query","getMovieById","movieId","getMovieCredits","getMovieReviews","this","MovieAPI","Wrapper","styled","Title","List","Item","Photo","Info","Name","Character","Devider","CharacterSpan","useState","castInfo","setCastInfo","id","useParams","useEffect","then","info","cast","reduce","acc","man","profilePhoto","profile_path","photoPlaceholder","actor","name","character","photo","map","src","alt"],"sourceRoot":""}
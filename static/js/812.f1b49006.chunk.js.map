{"version":3,"file":"static/js/812.f1b49006.chunk.js","mappings":"sMAEMA,GAAAA,EAAAA,EAAAA,IACJ,aAAe,IAAD,4BAKdC,kBALc,mCAKM,WAAMC,GAAN,kGAINC,EAAAA,EAAAA,IAAA,UACL,EAAKC,QADA,2BAC0BF,EAD1B,YACoC,EAAKG,SALnC,uBAGNC,EAHM,EAGdC,KAAQD,QAHM,kBAOTA,GAPS,gCAShBE,QAAQC,IAAI,KAAMC,SATF,yDALN,2DAkBdC,iBAlBc,mCAkBK,WAAMC,GAAN,kGAILT,EAAAA,EAAAA,IAAA,UACL,EAAKC,QADA,yBACwB,EAAKC,OAD7B,kBAC6CO,IALxC,uBAGLN,EAHK,EAGbC,KAAQD,QAHK,kBAQRA,GARQ,gCAUfE,QAAQC,IAAI,KAAMC,SAVH,yDAlBL,2DAgCdG,aAhCc,mCAgCC,WAAMC,GAAN,kGAEYX,EAAAA,EAAAA,IAAA,UAClB,EAAKC,QADa,kBACIU,EADJ,YACe,EAAKT,SAHhC,uBAEHE,EAFG,EAEHA,KAFG,kBAMJA,GANI,gCAQXC,QAAQC,IAAI,KAAMC,SARP,yDAhCD,2DA4CdK,gBA5Cc,mCA4CI,WAAMD,GAAN,kGAESX,EAAAA,EAAAA,IAAA,UAClB,EAAKC,QADa,kBACIU,EADJ,oBACuB,EAAKT,SAHrC,uBAENE,EAFM,EAENA,KAFM,kBAMPA,GANO,gCAQdC,QAAQC,IAAI,KAAMC,SARJ,yDA5CJ,2DAwDdM,gBAxDc,mCAwDI,WAAMF,GAAN,kGAIJX,EAAAA,EAAAA,IAAA,UACL,EAAKC,QADA,kBACiBU,EADjB,oBACoC,EAAKT,SALrC,uBAGJC,EAHI,EAGZC,KAAQD,QAHI,kBAQPA,GARO,gCAUdE,QAAQC,IAAI,KAAMC,SAVJ,yDAxDJ,sDACZO,KAAKb,QAAU,+BACfa,KAAKZ,OAAS,0CACf,IAoEGa,EAAW,IAAIlB,EAErB,K,sHCzEamB,EAAOC,EAAAA,GAAAA,GAAH,wGAMJC,EAAOD,EAAAA,GAAAA,GAAH,qGAUJE,IAJWF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,8CAIMA,EAAAA,GAAAA,IAAH,mGAOXI,EAAUJ,EAAAA,GAAAA,IAAH,yEAKPK,EAAQL,EAAAA,GAAAA,EAAH,qEAKLM,EAAcN,EAAAA,GAAAA,IAAH,oEAMXO,GAAOP,EAAAA,EAAAA,IAAOK,EAAPL,CAAH,0FAMJQ,EAAUR,EAAAA,GAAAA,KAAH,qHASPS,GAAWT,EAAAA,EAAAA,IAAOO,EAAPP,CAAH,+C,SC9CfU,EAAa,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACZC,GAAWC,EAAAA,EAAAA,MAEjB,OAAO,SAACd,EAAD,UACFY,EAAWG,KAAI,YAAsE,IAAnEC,EAAkE,EAAlEA,GAAIC,EAA8D,EAA9DA,MAA8D,IAAvDC,aAAAA,OAAuD,MAAxC,OAAwC,EAAhCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACzDC,EAAaF,EAAaG,QAAQ,GAClCC,EAAYL,EAAaM,MAAM,KAAKC,UAAUC,KAAK,KAEzD,OAAO,SAACxB,EAAD,WACH,UAAC,KAAD,CAASyB,GAAE,kBAAaX,GAAMY,MAAO,CAAEC,KAAMhB,GAA7C,WACI,SAACV,EAAD,CAAa2B,IAAKV,EAAaW,IAAKd,KACpC,UAACZ,EAAD,YACI,SAACC,EAAD,UAAQW,KACR,UAACV,EAAD,YACI,SAACC,EAAD,UAAOa,KACP,SAACZ,EAAD,iBACA,SAACC,EAAD,UAAWa,cARTP,EAarB,KAER,C,yJChCYgB,E,QAAO/B,GAAAA,KAAH,mD,SC0CjB,EA/BiB,WACb,OAA4BgC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAoBA,IAlBAC,EAAAA,EAAAA,YAAU,WACNrC,EAAAA,EAAAA,kBAA2B,QAAQsC,MAAM,SAAAH,GACrC,IAAMI,EAAOJ,EAAOK,QAAO,SAACC,EAAKC,GAC7B,IAAMC,EAASD,EAAMrB,YAAN,8CAA2DqB,EAAMrB,aAAgBuB,EAC1FC,EAAO,CACT5B,GAAIyB,EAAMzB,GACVC,MAAOwB,EAAMxB,MACbC,aAAcuB,EAAMvB,aACpBE,YAAasB,EACbvB,aAAcsB,EAAMtB,cAExB,MAAM,GAAN,eAAWqB,GAAX,CAAgBI,GACnB,GAAE,IAEHT,EAAUG,EACb,GACJ,GAAE,IAEEJ,EAEL,OAAO,SAACF,EAAD,WACH,SAACa,EAAA,EAAD,WACI,SAAClC,EAAA,EAAD,CACIC,WAAYsB,OAG3B,C","sources":["API/API.js","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import axios from 'axios';\n\nclass API {\n  constructor() {\n    this.baseUrl = 'https://api.themoviedb.org/3';\n    this.apiKey = 'api_key=9cca312caffd11f4ae9f11244d585025';\n  }\n\n  getTrendingMovies = async period => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/trending/movie/${period}?${this.apiKey}`\n      );\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMoviesByQuery = async query => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/search/movie?${this.apiKey}&query=${query}`\n      );\n\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieById = async movieId => {\n    try {\n      const { data } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}?${this.apiKey}`\n      );\n\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieCredits = async movieId => {\n    try {\n      const { data } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}/credits?${this.apiKey}`\n      );\n\n      return data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  getMovieReviews = async movieId => {\n    try {\n      const {\n        data: { results },\n      } = await axios.get(\n        `${this.baseUrl}/movie/${movieId}/reviews?${this.apiKey}`\n      );\n\n      return results;\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}\n\nconst MovieAPI = new API();\n\nexport default MovieAPI;\n","import styled from \"styled-components\";\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 10px;\n`;\n\nexport const Item = styled.li`\n    border: 1px solid grey;\n    border-radius: 3px;\n    overflow: hidden;\n`;\n\nexport const CardLink = styled(NavLink)`\n    max-width: 100%;\n`;\n\nexport const MoviePoster = styled.img`\n    max-width: 100%;\n    min-height: 351px;\n\n    object-fit: contain;\n`;\n\nexport const Wrapper = styled.div`\n    padding: 4px 8px;\n    padding-bottom: 6px;\n`;\n\nexport const Title = styled.p`\n    font-size: 14px;\n    font-weight: 700;\n`;\n\nexport const InfoWrapper = styled.div`\n    display: flex;\n\n    margin-top: 4px;\n`;\n\nexport const Info = styled(Title)`\n    font-weight: 600;\n    font-size: 10px;\n    color: #9e9e9e;\n`;\n\nexport const Divider = styled.span`\n    margin-left: 4px;\n\n    font-size: 10px;\n    font-weight: 600;\n\n    color: #ff9d7a;\n`;\n\nexport const DateInfo = styled(Info)`\n    margin-left: 4px;\n`;","import PropTypes from 'prop-types';\n\n//========== hooks ==========\nimport { useLocation } from 'react-router-dom';\n\n//========== components ==========\nimport { NavLink } from 'react-router-dom';\n\n//========== styles ==========\nimport { List, Item, MoviePoster, Wrapper, Title, InfoWrapper, Info, DateInfo, Divider } from './MoviesList.styled';\n\nconst MoviesList = ({ moviesInfo }) => {\n    const location = useLocation();\n\n    return <List>\n        {moviesInfo.map(({ id, title, release_date = '----', vote_average, poster_path }) => {\n            const fixedVotes = vote_average.toFixed(1);\n            const fixedDate = release_date.split('-').reverse().join('.');\n\n            return <Item key={id}>\n                <NavLink to={`/movies/${id}`} state={{ from: location }}>\n                    <MoviePoster src={poster_path} alt={title} />\n                    <Wrapper>\n                        <Title>{title}</Title>\n                        <InfoWrapper>\n                            <Info>{fixedVotes}</Info>\n                            <Divider>I</Divider>\n                            <DateInfo>{fixedDate}</DateInfo>\n                        </InfoWrapper>\n                    </Wrapper>\n                </NavLink>\n            </Item>\n        })}\n    </List>;\n};\n\nMoviesList.propTypes = {\n    moviesInfo: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string,\n        vote_average: PropTypes.number.isRequired,\n        poster_path: PropTypes.any.isRequired\n    }),),\n}\n\nexport { MoviesList };","import styled from \"styled-components\";\n\nexport const Main = styled.main`\n    padding-bottom: 20px;\n`;","import MovieAPI from \"API/API\";\n\n//========== hooks ==========\nimport { useState, useEffect } from \"react\";\n\n//========== components ==========\nimport { Container } from 'components/Container/Container';\nimport { MoviesList } from \"components/MoviesList/MoviesList\";\nimport posterPlaceholder from 'images/posterPlaceholder.png'\n\n//========== styled ==========\nimport { Main } from \"./HomePage.styled\";\n\nconst HomePage = () => {\n    const [movies, setMovies] = useState(null);\n\n    useEffect(() => {\n        MovieAPI.getTrendingMovies('week').then((movies => {\n            const info = movies.reduce((acc, movie) => {\n                const poster = movie.poster_path ? `https://image.tmdb.org/t/p/original/${movie.poster_path}` : posterPlaceholder;\n                const film = {\n                    id: movie.id,\n                    title: movie.title,\n                    release_date: movie.release_date,\n                    poster_path: poster,\n                    vote_average: movie.vote_average\n                };\n                return [...acc, film]\n            }, []);\n\n            setMovies(info);\n        }));\n    }, []);\n\n    if (!movies) return;\n\n    return <Main>\n        <Container>\n            <MoviesList\n                moviesInfo={movies} />\n        </Container>\n    </Main>;\n};\n\nexport default HomePage;"],"names":["API","getTrendingMovies","period","axios","baseUrl","apiKey","results","data","console","log","message","getMoviesByQuery","query","getMovieById","movieId","getMovieCredits","getMovieReviews","this","MovieAPI","List","styled","Item","MoviePoster","NavLink","Wrapper","Title","InfoWrapper","Info","Divider","DateInfo","MoviesList","moviesInfo","location","useLocation","map","id","title","release_date","vote_average","poster_path","fixedVotes","toFixed","fixedDate","split","reverse","join","to","state","from","src","alt","Main","useState","movies","setMovies","useEffect","then","info","reduce","acc","movie","poster","posterPlaceholder","film","Container"],"sourceRoot":""}